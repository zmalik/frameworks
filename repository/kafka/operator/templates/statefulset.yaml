apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .OperatorName }}
  namespace: {{ .Namespace }}
  labels:
    kafka: {{ .OperatorName }}
    app: kafka
spec:
  selector:
    matchLabels:
      app: kafka
      kafka: {{ .OperatorName }}
  serviceName: {{ .Name }}-svc
  replicas: {{ .Params.BROKER_COUNT }}
  template:
    metadata:
      labels:
        app: kafka
        kafka: {{ .OperatorName }}
    spec:
      terminationGracePeriodSeconds: 300
      containers:
        - name: k8skafka
          imagePullPolicy: Always
          image: mesosphere/kafka:0.2.0-2.3.0
          resources:
            requests:
              memory: {{ .Params.BROKER_MEM }}
              cpu: {{ .Params.BROKER_CPUS }}
            limits:
              memory: {{ .Params.BROKER_MEM_LIMIT }}
              cpu: {{ .Params.BROKER_CPUS_LIMIT }}
          ports:
            - containerPort: {{ .Params.BROKER_PORT }}
              name: server
          command:
            - sh
            - -c
            - "/etc/tls/bin/enable-tls.sh; cp /health-check-script/health-check.sh health-check.sh; chmod +x health-check.sh; exec $KAFKA_HOME/bin/start-kafka.sh"
          env:
            - name: KAFKA_HEAP_OPTS
              value : "-Xmx512M -Xms512M"
            - name: KAFKA_OPTS
              value: "-Dlogging.level=INFO"
            {{ if eq .Params.METRICS_ENABLED "true" }}
            - name: METRICS_OPTS
              value: "-javaagent:/opt/jmx-exporter/jmx_prometheus_javaagent.jar=9094:/metrics/metrics.properties"
            {{ end }}
            - name: KAFKA_ZK_URI
              value: {{ .Params.ZOOKEEPER_URI }}{{ if .Params.ZOOKEEPER_PATH }}{{ .Params.ZOOKEEPER_PATH }}{{ else }}/{{ .Name }}{{ end }}
            - name: GC_LOG_ENABLED
              value: "false"
            - name: LOG_DIR
            {{ if eq .Params.PERSISTENT_STORAGE "true" }}
              value: /var/lib/kafka/data
            {{ else }}
              value: "${KAFKA_HOME}/data"
            {{ end }}
            - name: METRICS_ENABLED
              value: "{{ .Params.METRICS_ENABLED }}"
            - name: KAFKA_CLIENT_ENABLED
              value: "{{ .Params.CLIENT_PORT_ENABLED }}"
            - name: KAFKA_BROKER_PORT
              value: "{{ .Params.BROKER_PORT }}"
            - name: KAFKA_CLIENT_PORT
              value: "{{ .Params.CLIENT_PORT }}"
          volumeMounts:
          {{ if eq .Params.PERSISTENT_STORAGE "true" }}
            - name: datadir
              mountPath: /var/lib/kafka
          {{ end }}
            - name: config
              mountPath: /config
            - name: health-check-script
              mountPath: /health-check-script
          {{ if eq .Params.METRICS_ENABLED "true" }}
            - name: metrics
              mountPath: /metrics
          {{ end }}
            - name: kafka-tls
              mountPath: /etc/tls/certs
            - name: enable-tls
              mountPath: /etc/tls/bin
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - "$KAFKA_HOME/readiness-check.sh"
            initialDelaySeconds: {{ .Params.READINESS_INITIAL_DELAY_SECONDS }}
            periodSeconds: {{ .Params.READINESS_PERIOD_SECONDS }}
            timeoutSeconds: {{ .Params.READINESS_TIMEOUT_SECONDS }}
            successThreshold: {{ .Params.READINESS_SUCCESS_THRESHOLD }}
            failureThreshold: {{ .Params.READINESS_FAILURE_THRESHOLD }}
          livenessProbe:
            {{ if eq .Params.LIVENESS_METHOD "FUNCTIONAL" }}
            exec:
              command:
              - sh
              - -c
              - "$KAFKA_HOME/health-check.sh"
            {{ else }}
            tcpSocket:
              port: {{ .Params.BROKER_PORT }}
            {{ end }}
            initialDelaySeconds: {{ .Params.LIVENESS_INITIAL_DELAY_SECONDS }}
            periodSeconds: {{ .Params.LIVENESS_PERIOD_SECONDS }}
            timeoutSeconds: {{ .Params.LIVENESS_TIMEOUT_SECONDS }}
            failureThreshold: {{ .Params.LIVENESS_FAILURE_THRESHOLD }}
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      volumes:
        - name: config
          configMap:
            name: {{ .Name }}-serverproperties
        - name: metrics
          configMap:
            name: {{ .Name }}-metrics-config
        - name: health-check-script
          configMap:
            name: {{ .Name }}-health-check-script
        - name: kafka-tls
          secret:
            secretName: kafka-tls
        - name: enable-tls
          configMap:
            name:  {{ .Name }}-enable-tls
            defaultMode: 0777
  volumeClaimTemplates:
    {{ if eq .Params.PERSISTENT_STORAGE "true" }}
    - metadata:
        name: datadir
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Params.DISK_SIZE }}
        {{ if .Params.STORAGE_CLASS }}
        storageClassName: {{ .Params.STORAGE_CLASS }}
        {{ end }}
    {{ end }}
